; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; http://docs.platformio.org/page/projectconf.html

[platformio]
name = esp32_oscilloscope
default_envs = esp32_release


; Shared options
[env]
lib_ldf_mode = deep+
check_tool = cppcheck, clangtidy
check_flags =
  cppcheck: 
    --addon=cert 
    --addon=threadsafety 
    --addon=y2038
    --enable=all                           ;Enable all additional checks.
    --std=c11                              ;Set C11 standard.
    --language=c                           ;Forces Cppcheck to check all files as the c language.
extra_scripts = 
    scripts/run_lvgl_kconfig.py          ;Generate and modify lv_conf.h file.
    scripts/run_clangformat.py           ;Run clang-format on source files.
lib_archive = false
build_flags =
  -Wall                                   ;Turn on all optional warnings which are desirable for normal code
  -Wno-unused-variable                    ;Suppres warnings about unused variables.
build_src_flags =
  ;-Wundef                                 ;Warn if an undefined identifier is evaluated in an #if directive.
  

[espressif]
esp_build_src_flags =
  ${env.build_src_flags}
esp_build_flags =
  ${env.build_flags}
  -Wextra                                 ;enables an additional set of flags not covered by -Wall
  ;-Wdouble-promotion                      ;Give a warning when a value of type float is implicitly promoted to double.
  ;-Os                                     ;Optimize for size.
  -I include/esp32                        ;Search for headers here because of lv_conf.h
  -DLV_LVGL_H_INCLUDE_SIMPLE
  -DLV_CONF_INCLUDE_SIMPLE
  -DLV_CONF_PATH=lv_conf.h
  ; Add recursive dirs for hal headers search
  !python -c "import os; print(' '.join(['-I {}'.format(i[0].replace('\x5C','/')) for i in os.walk('hal/esp32')]))"
esp_src_dirs = 
  +<*>
  +<../hal/esp32>                         ;Build driver functions needed for lvgl when running on hardware.
esp_monitor_filters =
  direct                                  ;Do-nothing: forward all data unchanged.
  esp32_exception_decoder                 ;Custom filter for Espressif 32 which decodes crash exception
  log2file                                ;Log data to a file “platformio-device-monitor-%date%.log” located in the current working directory
esp_ignore_test_dirs = 
  desktop/*                               ;Skip emulator tests when running on hardware.
esp_lib_deps =
  lvgl/lvgl@^8.3.9
esp_monitor_speed = 115200                ;Default esp32 monitor speed.

[native]
native_build_src_flags =
  ${env.build_src_flags}
native_sdl_libs =
  lvgl/lvgl@^8.3.9
  lvgl/lv_drivers@~8.3.0
native_src =
  +<*>
  +<../hal/sdl2>                          ;Build driver functions needed for lvgl when running on sdl.
native_sdl_build_flags =
  ${env.build_flags}
  ;-fprofile-abs-path
  -lgcov
  -O0
  --coverage
  ;-Wshadow                               ;Warn whenever a local variable or type declaration shadows another variable, parameter, type, class member (in C++), or instance variable (in Objective-C) or whenever a built-in function is shadowed.
  ;-Og                                    ;Optimize debugging experience.
  -lm                                     ;Link math library for linux.
  -D LV_CONF_SKIP                         ;Don't use lv_conf.h file, tweak parameters via build flags here          
  -D LV_CONF_INCLUDE_SIMPLE
  -D LV_USE_LOG=1                         ;Enable the log module
  -D LV_LOG_LEVEL=LV_LOG_LEVEL_INFO       ;Log important events
  -D LV_LOG_PRINTF=1                      ;Print the log with 'printf
  ; Add recursive dirs for hal headers search
  !python -c "import os; print(' '.join(['-I {}'.format(i[0].replace('\x5C','/')) for i in os.walk('hal/sdl2')]))"
  -lSDL2                                  ;Link SDL2 library.
  ; SDL drivers options
  -D LV_LVGL_H_INCLUDE_SIMPLE
  -D LV_DRV_NO_CONF                       ;Don't use lv_drv_conf.h file, tweak parameters via build flags here  
  -D USE_SDL
  -D SDL_HOR_RES=320
  -D SDL_VER_RES=240
  -D SDL_ZOOM=2                           ;Enlarge display when using SDL. No changes on resolution.
  -D SDL_INCLUDE_PATH="\"SDL2/SDL.h\""
  -D LV_MEM_CUSTOM=1                      ;Use custom malloc/free functions.
  -D LV_MEM_SIZE="(128U * 1024U)"
native_ignore_test_dirs = embedded/*      ;Skip embedded tests when running on native.
native_extra_scripts = 
    scripts/run_clangformat.py           ;Run clang-format on source files.
    scripts/sdl2_build_extra.py
    scripts/run_gcovr.py

[env:native_sdl]
platform = native
extra_scripts = ${native.native_extra_scripts}
build_flags = ${native.native_sdl_build_flags}
lib_deps = ${native.native_sdl_libs}
build_src_filter = ${native.native_src}
test_framework = unity
test_ignore = ${native.native_ignore_test_dirs}


[env:native_test]                         ;Env for running native tests apart from gui tests - for faster compiling when possible.
build_type = test
platform = native
test_framework = unity
test_ignore = 
  ${native.native_ignore_test_dirs}
  desktop/test_gui                        ;Disable gui tests for faster compiling time. Run all the other native tests.

[env:esp32_release]
build_type = release
platform = espressif32
framework = espidf
board = esp-wrover-kit
build_flags = ${espressif.esp_build_flags}
lib_deps = ${espressif.esp_lib_deps}
build_src_filter = ${espressif.esp_src_dirs}
monitor_speed = ${espressif.esp_monitor_speed}
monitor_filters = ${espressif.esp_monitor_filters}
custom_lvgl_kconfig_save_settings = include/esp32/lv_conf.config    ;Values needed for scripts/run_lvgl_kconfig.py
custom_lvgl_kconfig_output_header = include/esp32/lv_conf.h         ;Values needed for scripts/run_lvgl_kconfig.py


[env:esp32_debug]
build_type = debug
platform = espressif32
framework = espidf
board = esp-wrover-kit
upload_protocol = ftdi                     
debug_tool = ftdi
build_flags = ${espressif.esp_build_flags}
lib_deps = ${espressif.esp_lib_deps}
build_src_filter = ${espressif.esp_src_dirs}
monitor_speed = ${espressif.esp_monitor_speed}
monitor_filters = ${espressif.esp_monitor_filters}
custom_lvgl_kconfig_save_settings = include/esp32/lv_conf.config    ;Values needed for scripts/run_lvgl_kconfig.py
custom_lvgl_kconfig_output_header = include/esp32/lv_conf.h         ;Values needed for scripts/run_lvgl_kconfig.py

[env:esp32_test]
build_type = test
platform = espressif32
framework = espidf
board = esp-wrover-kit
build_flags = ${espressif.esp_build_flags}
lib_deps = ${espressif.esp_lib_deps}
build_src_filter = ${espressif.esp_src_dirs}
monitor_speed = ${espressif.esp_monitor_speed}
monitor_filters = ${espressif.esp_monitor_filters}
custom_lvgl_kconfig_save_settings = include/esp32/lv_conf.config    ;Values needed for scripts/run_lvgl_kconfig.py
custom_lvgl_kconfig_output_header = include/esp32/lv_conf.h         ;Values needed for scripts/run_lvgl_kconfig.py
test_framework = unity
test_ignore = ${espressif.esp_ignore_test_dirs}
test_port = COM16