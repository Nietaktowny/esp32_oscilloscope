/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_SPI_MASTER_H
#define _MOCK_SPI_MASTER_H

#include "unity.h"
#include "stdio.h"
#include "driver/spi_master.h"
#include "CException.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

#ifdef __cplusplus
extern "C" {
#endif

void mock_spi_master_Init(void);
void mock_spi_master_Destroy(void);
void mock_spi_master_Verify(void);




#define spi_bus_add_device_IgnoreAndReturn(cmock_retval) spi_bus_add_device_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void spi_bus_add_device_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define spi_bus_add_device_StopIgnore() spi_bus_add_device_CMockStopIgnore()
void spi_bus_add_device_CMockStopIgnore(void);
#define spi_bus_add_device_ExpectAnyArgsAndReturn(cmock_retval) spi_bus_add_device_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void spi_bus_add_device_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define spi_bus_add_device_ExpectAndReturn(host_id, dev_config, handle, cmock_retval) spi_bus_add_device_CMockExpectAndReturn(__LINE__, host_id, dev_config, handle, cmock_retval)
void spi_bus_add_device_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, spi_host_device_t host_id, const spi_device_interface_config_t* dev_config, spi_device_handle_t* handle, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_spi_bus_add_device_CALLBACK)(spi_host_device_t host_id, const spi_device_interface_config_t* dev_config, spi_device_handle_t* handle, int cmock_num_calls);
void spi_bus_add_device_AddCallback(CMOCK_spi_bus_add_device_CALLBACK Callback);
void spi_bus_add_device_Stub(CMOCK_spi_bus_add_device_CALLBACK Callback);
#define spi_bus_add_device_StubWithCallback spi_bus_add_device_Stub
#define spi_bus_add_device_ExpectAndThrow(host_id, dev_config, handle, cmock_to_throw) spi_bus_add_device_CMockExpectAndThrow(__LINE__, host_id, dev_config, handle, cmock_to_throw)
void spi_bus_add_device_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, spi_host_device_t host_id, const spi_device_interface_config_t* dev_config, spi_device_handle_t* handle, CEXCEPTION_T cmock_to_throw);
#define spi_bus_add_device_IgnoreArg_host_id() spi_bus_add_device_CMockIgnoreArg_host_id(__LINE__)
void spi_bus_add_device_CMockIgnoreArg_host_id(UNITY_LINE_TYPE cmock_line);
#define spi_bus_add_device_IgnoreArg_dev_config() spi_bus_add_device_CMockIgnoreArg_dev_config(__LINE__)
void spi_bus_add_device_CMockIgnoreArg_dev_config(UNITY_LINE_TYPE cmock_line);
#define spi_bus_add_device_IgnoreArg_handle() spi_bus_add_device_CMockIgnoreArg_handle(__LINE__)
void spi_bus_add_device_CMockIgnoreArg_handle(UNITY_LINE_TYPE cmock_line);
#define spi_bus_remove_device_IgnoreAndReturn(cmock_retval) spi_bus_remove_device_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void spi_bus_remove_device_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define spi_bus_remove_device_StopIgnore() spi_bus_remove_device_CMockStopIgnore()
void spi_bus_remove_device_CMockStopIgnore(void);
#define spi_bus_remove_device_ExpectAnyArgsAndReturn(cmock_retval) spi_bus_remove_device_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void spi_bus_remove_device_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define spi_bus_remove_device_ExpectAndReturn(handle, cmock_retval) spi_bus_remove_device_CMockExpectAndReturn(__LINE__, handle, cmock_retval)
void spi_bus_remove_device_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, spi_device_handle_t handle, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_spi_bus_remove_device_CALLBACK)(spi_device_handle_t handle, int cmock_num_calls);
void spi_bus_remove_device_AddCallback(CMOCK_spi_bus_remove_device_CALLBACK Callback);
void spi_bus_remove_device_Stub(CMOCK_spi_bus_remove_device_CALLBACK Callback);
#define spi_bus_remove_device_StubWithCallback spi_bus_remove_device_Stub
#define spi_bus_remove_device_ExpectAndThrow(handle, cmock_to_throw) spi_bus_remove_device_CMockExpectAndThrow(__LINE__, handle, cmock_to_throw)
void spi_bus_remove_device_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, spi_device_handle_t handle, CEXCEPTION_T cmock_to_throw);
#define spi_bus_remove_device_IgnoreArg_handle() spi_bus_remove_device_CMockIgnoreArg_handle(__LINE__)
void spi_bus_remove_device_CMockIgnoreArg_handle(UNITY_LINE_TYPE cmock_line);
#define spi_device_queue_trans_IgnoreAndReturn(cmock_retval) spi_device_queue_trans_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void spi_device_queue_trans_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define spi_device_queue_trans_StopIgnore() spi_device_queue_trans_CMockStopIgnore()
void spi_device_queue_trans_CMockStopIgnore(void);
#define spi_device_queue_trans_ExpectAnyArgsAndReturn(cmock_retval) spi_device_queue_trans_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void spi_device_queue_trans_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define spi_device_queue_trans_ExpectAndReturn(handle, trans_desc, ticks_to_wait, cmock_retval) spi_device_queue_trans_CMockExpectAndReturn(__LINE__, handle, trans_desc, ticks_to_wait, cmock_retval)
void spi_device_queue_trans_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, spi_device_handle_t handle, spi_transaction_t* trans_desc, TickType_t ticks_to_wait, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_spi_device_queue_trans_CALLBACK)(spi_device_handle_t handle, spi_transaction_t* trans_desc, TickType_t ticks_to_wait, int cmock_num_calls);
void spi_device_queue_trans_AddCallback(CMOCK_spi_device_queue_trans_CALLBACK Callback);
void spi_device_queue_trans_Stub(CMOCK_spi_device_queue_trans_CALLBACK Callback);
#define spi_device_queue_trans_StubWithCallback spi_device_queue_trans_Stub
#define spi_device_queue_trans_ExpectAndThrow(handle, trans_desc, ticks_to_wait, cmock_to_throw) spi_device_queue_trans_CMockExpectAndThrow(__LINE__, handle, trans_desc, ticks_to_wait, cmock_to_throw)
void spi_device_queue_trans_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, spi_device_handle_t handle, spi_transaction_t* trans_desc, TickType_t ticks_to_wait, CEXCEPTION_T cmock_to_throw);
#define spi_device_queue_trans_IgnoreArg_handle() spi_device_queue_trans_CMockIgnoreArg_handle(__LINE__)
void spi_device_queue_trans_CMockIgnoreArg_handle(UNITY_LINE_TYPE cmock_line);
#define spi_device_queue_trans_IgnoreArg_trans_desc() spi_device_queue_trans_CMockIgnoreArg_trans_desc(__LINE__)
void spi_device_queue_trans_CMockIgnoreArg_trans_desc(UNITY_LINE_TYPE cmock_line);
#define spi_device_queue_trans_IgnoreArg_ticks_to_wait() spi_device_queue_trans_CMockIgnoreArg_ticks_to_wait(__LINE__)
void spi_device_queue_trans_CMockIgnoreArg_ticks_to_wait(UNITY_LINE_TYPE cmock_line);
#define spi_device_get_trans_result_IgnoreAndReturn(cmock_retval) spi_device_get_trans_result_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void spi_device_get_trans_result_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define spi_device_get_trans_result_StopIgnore() spi_device_get_trans_result_CMockStopIgnore()
void spi_device_get_trans_result_CMockStopIgnore(void);
#define spi_device_get_trans_result_ExpectAnyArgsAndReturn(cmock_retval) spi_device_get_trans_result_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void spi_device_get_trans_result_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define spi_device_get_trans_result_ExpectAndReturn(handle, trans_desc, ticks_to_wait, cmock_retval) spi_device_get_trans_result_CMockExpectAndReturn(__LINE__, handle, trans_desc, ticks_to_wait, cmock_retval)
void spi_device_get_trans_result_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, spi_device_handle_t handle, spi_transaction_t** trans_desc, TickType_t ticks_to_wait, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_spi_device_get_trans_result_CALLBACK)(spi_device_handle_t handle, spi_transaction_t** trans_desc, TickType_t ticks_to_wait, int cmock_num_calls);
void spi_device_get_trans_result_AddCallback(CMOCK_spi_device_get_trans_result_CALLBACK Callback);
void spi_device_get_trans_result_Stub(CMOCK_spi_device_get_trans_result_CALLBACK Callback);
#define spi_device_get_trans_result_StubWithCallback spi_device_get_trans_result_Stub
#define spi_device_get_trans_result_ExpectAndThrow(handle, trans_desc, ticks_to_wait, cmock_to_throw) spi_device_get_trans_result_CMockExpectAndThrow(__LINE__, handle, trans_desc, ticks_to_wait, cmock_to_throw)
void spi_device_get_trans_result_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, spi_device_handle_t handle, spi_transaction_t** trans_desc, TickType_t ticks_to_wait, CEXCEPTION_T cmock_to_throw);
#define spi_device_get_trans_result_IgnoreArg_handle() spi_device_get_trans_result_CMockIgnoreArg_handle(__LINE__)
void spi_device_get_trans_result_CMockIgnoreArg_handle(UNITY_LINE_TYPE cmock_line);
#define spi_device_get_trans_result_IgnoreArg_trans_desc() spi_device_get_trans_result_CMockIgnoreArg_trans_desc(__LINE__)
void spi_device_get_trans_result_CMockIgnoreArg_trans_desc(UNITY_LINE_TYPE cmock_line);
#define spi_device_get_trans_result_IgnoreArg_ticks_to_wait() spi_device_get_trans_result_CMockIgnoreArg_ticks_to_wait(__LINE__)
void spi_device_get_trans_result_CMockIgnoreArg_ticks_to_wait(UNITY_LINE_TYPE cmock_line);
#define spi_device_transmit_IgnoreAndReturn(cmock_retval) spi_device_transmit_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void spi_device_transmit_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define spi_device_transmit_StopIgnore() spi_device_transmit_CMockStopIgnore()
void spi_device_transmit_CMockStopIgnore(void);
#define spi_device_transmit_ExpectAnyArgsAndReturn(cmock_retval) spi_device_transmit_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void spi_device_transmit_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define spi_device_transmit_ExpectAndReturn(handle, trans_desc, cmock_retval) spi_device_transmit_CMockExpectAndReturn(__LINE__, handle, trans_desc, cmock_retval)
void spi_device_transmit_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, spi_device_handle_t handle, spi_transaction_t* trans_desc, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_spi_device_transmit_CALLBACK)(spi_device_handle_t handle, spi_transaction_t* trans_desc, int cmock_num_calls);
void spi_device_transmit_AddCallback(CMOCK_spi_device_transmit_CALLBACK Callback);
void spi_device_transmit_Stub(CMOCK_spi_device_transmit_CALLBACK Callback);
#define spi_device_transmit_StubWithCallback spi_device_transmit_Stub
#define spi_device_transmit_ExpectAndThrow(handle, trans_desc, cmock_to_throw) spi_device_transmit_CMockExpectAndThrow(__LINE__, handle, trans_desc, cmock_to_throw)
void spi_device_transmit_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, spi_device_handle_t handle, spi_transaction_t* trans_desc, CEXCEPTION_T cmock_to_throw);
#define spi_device_transmit_IgnoreArg_handle() spi_device_transmit_CMockIgnoreArg_handle(__LINE__)
void spi_device_transmit_CMockIgnoreArg_handle(UNITY_LINE_TYPE cmock_line);
#define spi_device_transmit_IgnoreArg_trans_desc() spi_device_transmit_CMockIgnoreArg_trans_desc(__LINE__)
void spi_device_transmit_CMockIgnoreArg_trans_desc(UNITY_LINE_TYPE cmock_line);
#define spi_device_polling_start_IgnoreAndReturn(cmock_retval) spi_device_polling_start_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void spi_device_polling_start_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define spi_device_polling_start_StopIgnore() spi_device_polling_start_CMockStopIgnore()
void spi_device_polling_start_CMockStopIgnore(void);
#define spi_device_polling_start_ExpectAnyArgsAndReturn(cmock_retval) spi_device_polling_start_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void spi_device_polling_start_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define spi_device_polling_start_ExpectAndReturn(handle, trans_desc, ticks_to_wait, cmock_retval) spi_device_polling_start_CMockExpectAndReturn(__LINE__, handle, trans_desc, ticks_to_wait, cmock_retval)
void spi_device_polling_start_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, spi_device_handle_t handle, spi_transaction_t* trans_desc, TickType_t ticks_to_wait, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_spi_device_polling_start_CALLBACK)(spi_device_handle_t handle, spi_transaction_t* trans_desc, TickType_t ticks_to_wait, int cmock_num_calls);
void spi_device_polling_start_AddCallback(CMOCK_spi_device_polling_start_CALLBACK Callback);
void spi_device_polling_start_Stub(CMOCK_spi_device_polling_start_CALLBACK Callback);
#define spi_device_polling_start_StubWithCallback spi_device_polling_start_Stub
#define spi_device_polling_start_ExpectAndThrow(handle, trans_desc, ticks_to_wait, cmock_to_throw) spi_device_polling_start_CMockExpectAndThrow(__LINE__, handle, trans_desc, ticks_to_wait, cmock_to_throw)
void spi_device_polling_start_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, spi_device_handle_t handle, spi_transaction_t* trans_desc, TickType_t ticks_to_wait, CEXCEPTION_T cmock_to_throw);
#define spi_device_polling_start_IgnoreArg_handle() spi_device_polling_start_CMockIgnoreArg_handle(__LINE__)
void spi_device_polling_start_CMockIgnoreArg_handle(UNITY_LINE_TYPE cmock_line);
#define spi_device_polling_start_IgnoreArg_trans_desc() spi_device_polling_start_CMockIgnoreArg_trans_desc(__LINE__)
void spi_device_polling_start_CMockIgnoreArg_trans_desc(UNITY_LINE_TYPE cmock_line);
#define spi_device_polling_start_IgnoreArg_ticks_to_wait() spi_device_polling_start_CMockIgnoreArg_ticks_to_wait(__LINE__)
void spi_device_polling_start_CMockIgnoreArg_ticks_to_wait(UNITY_LINE_TYPE cmock_line);
#define spi_device_polling_end_IgnoreAndReturn(cmock_retval) spi_device_polling_end_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void spi_device_polling_end_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define spi_device_polling_end_StopIgnore() spi_device_polling_end_CMockStopIgnore()
void spi_device_polling_end_CMockStopIgnore(void);
#define spi_device_polling_end_ExpectAnyArgsAndReturn(cmock_retval) spi_device_polling_end_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void spi_device_polling_end_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define spi_device_polling_end_ExpectAndReturn(handle, ticks_to_wait, cmock_retval) spi_device_polling_end_CMockExpectAndReturn(__LINE__, handle, ticks_to_wait, cmock_retval)
void spi_device_polling_end_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, spi_device_handle_t handle, TickType_t ticks_to_wait, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_spi_device_polling_end_CALLBACK)(spi_device_handle_t handle, TickType_t ticks_to_wait, int cmock_num_calls);
void spi_device_polling_end_AddCallback(CMOCK_spi_device_polling_end_CALLBACK Callback);
void spi_device_polling_end_Stub(CMOCK_spi_device_polling_end_CALLBACK Callback);
#define spi_device_polling_end_StubWithCallback spi_device_polling_end_Stub
#define spi_device_polling_end_ExpectAndThrow(handle, ticks_to_wait, cmock_to_throw) spi_device_polling_end_CMockExpectAndThrow(__LINE__, handle, ticks_to_wait, cmock_to_throw)
void spi_device_polling_end_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, spi_device_handle_t handle, TickType_t ticks_to_wait, CEXCEPTION_T cmock_to_throw);
#define spi_device_polling_end_IgnoreArg_handle() spi_device_polling_end_CMockIgnoreArg_handle(__LINE__)
void spi_device_polling_end_CMockIgnoreArg_handle(UNITY_LINE_TYPE cmock_line);
#define spi_device_polling_end_IgnoreArg_ticks_to_wait() spi_device_polling_end_CMockIgnoreArg_ticks_to_wait(__LINE__)
void spi_device_polling_end_CMockIgnoreArg_ticks_to_wait(UNITY_LINE_TYPE cmock_line);
#define spi_device_polling_transmit_IgnoreAndReturn(cmock_retval) spi_device_polling_transmit_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void spi_device_polling_transmit_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define spi_device_polling_transmit_StopIgnore() spi_device_polling_transmit_CMockStopIgnore()
void spi_device_polling_transmit_CMockStopIgnore(void);
#define spi_device_polling_transmit_ExpectAnyArgsAndReturn(cmock_retval) spi_device_polling_transmit_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void spi_device_polling_transmit_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define spi_device_polling_transmit_ExpectAndReturn(handle, trans_desc, cmock_retval) spi_device_polling_transmit_CMockExpectAndReturn(__LINE__, handle, trans_desc, cmock_retval)
void spi_device_polling_transmit_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, spi_device_handle_t handle, spi_transaction_t* trans_desc, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_spi_device_polling_transmit_CALLBACK)(spi_device_handle_t handle, spi_transaction_t* trans_desc, int cmock_num_calls);
void spi_device_polling_transmit_AddCallback(CMOCK_spi_device_polling_transmit_CALLBACK Callback);
void spi_device_polling_transmit_Stub(CMOCK_spi_device_polling_transmit_CALLBACK Callback);
#define spi_device_polling_transmit_StubWithCallback spi_device_polling_transmit_Stub
#define spi_device_polling_transmit_ExpectAndThrow(handle, trans_desc, cmock_to_throw) spi_device_polling_transmit_CMockExpectAndThrow(__LINE__, handle, trans_desc, cmock_to_throw)
void spi_device_polling_transmit_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, spi_device_handle_t handle, spi_transaction_t* trans_desc, CEXCEPTION_T cmock_to_throw);
#define spi_device_polling_transmit_IgnoreArg_handle() spi_device_polling_transmit_CMockIgnoreArg_handle(__LINE__)
void spi_device_polling_transmit_CMockIgnoreArg_handle(UNITY_LINE_TYPE cmock_line);
#define spi_device_polling_transmit_IgnoreArg_trans_desc() spi_device_polling_transmit_CMockIgnoreArg_trans_desc(__LINE__)
void spi_device_polling_transmit_CMockIgnoreArg_trans_desc(UNITY_LINE_TYPE cmock_line);
#define spi_device_acquire_bus_IgnoreAndReturn(cmock_retval) spi_device_acquire_bus_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void spi_device_acquire_bus_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define spi_device_acquire_bus_StopIgnore() spi_device_acquire_bus_CMockStopIgnore()
void spi_device_acquire_bus_CMockStopIgnore(void);
#define spi_device_acquire_bus_ExpectAnyArgsAndReturn(cmock_retval) spi_device_acquire_bus_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void spi_device_acquire_bus_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define spi_device_acquire_bus_ExpectAndReturn(device, wait, cmock_retval) spi_device_acquire_bus_CMockExpectAndReturn(__LINE__, device, wait, cmock_retval)
void spi_device_acquire_bus_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, spi_device_handle_t device, TickType_t wait, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_spi_device_acquire_bus_CALLBACK)(spi_device_handle_t device, TickType_t wait, int cmock_num_calls);
void spi_device_acquire_bus_AddCallback(CMOCK_spi_device_acquire_bus_CALLBACK Callback);
void spi_device_acquire_bus_Stub(CMOCK_spi_device_acquire_bus_CALLBACK Callback);
#define spi_device_acquire_bus_StubWithCallback spi_device_acquire_bus_Stub
#define spi_device_acquire_bus_ExpectAndThrow(device, wait, cmock_to_throw) spi_device_acquire_bus_CMockExpectAndThrow(__LINE__, device, wait, cmock_to_throw)
void spi_device_acquire_bus_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, spi_device_handle_t device, TickType_t wait, CEXCEPTION_T cmock_to_throw);
#define spi_device_acquire_bus_IgnoreArg_device() spi_device_acquire_bus_CMockIgnoreArg_device(__LINE__)
void spi_device_acquire_bus_CMockIgnoreArg_device(UNITY_LINE_TYPE cmock_line);
#define spi_device_acquire_bus_IgnoreArg_wait() spi_device_acquire_bus_CMockIgnoreArg_wait(__LINE__)
void spi_device_acquire_bus_CMockIgnoreArg_wait(UNITY_LINE_TYPE cmock_line);
#define spi_device_release_bus_Ignore() spi_device_release_bus_CMockIgnore()
void spi_device_release_bus_CMockIgnore(void);
#define spi_device_release_bus_StopIgnore() spi_device_release_bus_CMockStopIgnore()
void spi_device_release_bus_CMockStopIgnore(void);
#define spi_device_release_bus_ExpectAnyArgs() spi_device_release_bus_CMockExpectAnyArgs(__LINE__)
void spi_device_release_bus_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define spi_device_release_bus_Expect(dev) spi_device_release_bus_CMockExpect(__LINE__, dev)
void spi_device_release_bus_CMockExpect(UNITY_LINE_TYPE cmock_line, spi_device_handle_t dev);
typedef void (* CMOCK_spi_device_release_bus_CALLBACK)(spi_device_handle_t dev, int cmock_num_calls);
void spi_device_release_bus_AddCallback(CMOCK_spi_device_release_bus_CALLBACK Callback);
void spi_device_release_bus_Stub(CMOCK_spi_device_release_bus_CALLBACK Callback);
#define spi_device_release_bus_StubWithCallback spi_device_release_bus_Stub
#define spi_device_release_bus_ExpectAndThrow(dev, cmock_to_throw) spi_device_release_bus_CMockExpectAndThrow(__LINE__, dev, cmock_to_throw)
void spi_device_release_bus_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, spi_device_handle_t dev, CEXCEPTION_T cmock_to_throw);
#define spi_device_release_bus_IgnoreArg_dev() spi_device_release_bus_CMockIgnoreArg_dev(__LINE__)
void spi_device_release_bus_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define spi_get_actual_clock_IgnoreAndReturn(cmock_retval) spi_get_actual_clock_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void spi_get_actual_clock_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define spi_get_actual_clock_StopIgnore() spi_get_actual_clock_CMockStopIgnore()
void spi_get_actual_clock_CMockStopIgnore(void);
#define spi_get_actual_clock_ExpectAnyArgsAndReturn(cmock_retval) spi_get_actual_clock_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void spi_get_actual_clock_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define spi_get_actual_clock_ExpectAndReturn(fapb, hz, duty_cycle, cmock_retval) spi_get_actual_clock_CMockExpectAndReturn(__LINE__, fapb, hz, duty_cycle, cmock_retval)
void spi_get_actual_clock_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int fapb, int hz, int duty_cycle, int cmock_to_return);
typedef int (* CMOCK_spi_get_actual_clock_CALLBACK)(int fapb, int hz, int duty_cycle, int cmock_num_calls);
void spi_get_actual_clock_AddCallback(CMOCK_spi_get_actual_clock_CALLBACK Callback);
void spi_get_actual_clock_Stub(CMOCK_spi_get_actual_clock_CALLBACK Callback);
#define spi_get_actual_clock_StubWithCallback spi_get_actual_clock_Stub
#define spi_get_actual_clock_ExpectAndThrow(fapb, hz, duty_cycle, cmock_to_throw) spi_get_actual_clock_CMockExpectAndThrow(__LINE__, fapb, hz, duty_cycle, cmock_to_throw)
void spi_get_actual_clock_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, int fapb, int hz, int duty_cycle, CEXCEPTION_T cmock_to_throw);
#define spi_get_actual_clock_IgnoreArg_fapb() spi_get_actual_clock_CMockIgnoreArg_fapb(__LINE__)
void spi_get_actual_clock_CMockIgnoreArg_fapb(UNITY_LINE_TYPE cmock_line);
#define spi_get_actual_clock_IgnoreArg_hz() spi_get_actual_clock_CMockIgnoreArg_hz(__LINE__)
void spi_get_actual_clock_CMockIgnoreArg_hz(UNITY_LINE_TYPE cmock_line);
#define spi_get_actual_clock_IgnoreArg_duty_cycle() spi_get_actual_clock_CMockIgnoreArg_duty_cycle(__LINE__)
void spi_get_actual_clock_CMockIgnoreArg_duty_cycle(UNITY_LINE_TYPE cmock_line);
#define spi_get_timing_Ignore() spi_get_timing_CMockIgnore()
void spi_get_timing_CMockIgnore(void);
#define spi_get_timing_StopIgnore() spi_get_timing_CMockStopIgnore()
void spi_get_timing_CMockStopIgnore(void);
#define spi_get_timing_ExpectAnyArgs() spi_get_timing_CMockExpectAnyArgs(__LINE__)
void spi_get_timing_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define spi_get_timing_Expect(gpio_is_used, input_delay_ns, eff_clk, dummy_o, cycles_remain_o) spi_get_timing_CMockExpect(__LINE__, gpio_is_used, input_delay_ns, eff_clk, dummy_o, cycles_remain_o)
void spi_get_timing_CMockExpect(UNITY_LINE_TYPE cmock_line, bool gpio_is_used, int input_delay_ns, int eff_clk, int* dummy_o, int* cycles_remain_o);
typedef void (* CMOCK_spi_get_timing_CALLBACK)(bool gpio_is_used, int input_delay_ns, int eff_clk, int* dummy_o, int* cycles_remain_o, int cmock_num_calls);
void spi_get_timing_AddCallback(CMOCK_spi_get_timing_CALLBACK Callback);
void spi_get_timing_Stub(CMOCK_spi_get_timing_CALLBACK Callback);
#define spi_get_timing_StubWithCallback spi_get_timing_Stub
#define spi_get_timing_ExpectAndThrow(gpio_is_used, input_delay_ns, eff_clk, dummy_o, cycles_remain_o, cmock_to_throw) spi_get_timing_CMockExpectAndThrow(__LINE__, gpio_is_used, input_delay_ns, eff_clk, dummy_o, cycles_remain_o, cmock_to_throw)
void spi_get_timing_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, bool gpio_is_used, int input_delay_ns, int eff_clk, int* dummy_o, int* cycles_remain_o, CEXCEPTION_T cmock_to_throw);
#define spi_get_timing_IgnoreArg_gpio_is_used() spi_get_timing_CMockIgnoreArg_gpio_is_used(__LINE__)
void spi_get_timing_CMockIgnoreArg_gpio_is_used(UNITY_LINE_TYPE cmock_line);
#define spi_get_timing_IgnoreArg_input_delay_ns() spi_get_timing_CMockIgnoreArg_input_delay_ns(__LINE__)
void spi_get_timing_CMockIgnoreArg_input_delay_ns(UNITY_LINE_TYPE cmock_line);
#define spi_get_timing_IgnoreArg_eff_clk() spi_get_timing_CMockIgnoreArg_eff_clk(__LINE__)
void spi_get_timing_CMockIgnoreArg_eff_clk(UNITY_LINE_TYPE cmock_line);
#define spi_get_timing_IgnoreArg_dummy_o() spi_get_timing_CMockIgnoreArg_dummy_o(__LINE__)
void spi_get_timing_CMockIgnoreArg_dummy_o(UNITY_LINE_TYPE cmock_line);
#define spi_get_timing_IgnoreArg_cycles_remain_o() spi_get_timing_CMockIgnoreArg_cycles_remain_o(__LINE__)
void spi_get_timing_CMockIgnoreArg_cycles_remain_o(UNITY_LINE_TYPE cmock_line);
#define spi_get_freq_limit_IgnoreAndReturn(cmock_retval) spi_get_freq_limit_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void spi_get_freq_limit_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define spi_get_freq_limit_StopIgnore() spi_get_freq_limit_CMockStopIgnore()
void spi_get_freq_limit_CMockStopIgnore(void);
#define spi_get_freq_limit_ExpectAnyArgsAndReturn(cmock_retval) spi_get_freq_limit_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void spi_get_freq_limit_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define spi_get_freq_limit_ExpectAndReturn(gpio_is_used, input_delay_ns, cmock_retval) spi_get_freq_limit_CMockExpectAndReturn(__LINE__, gpio_is_used, input_delay_ns, cmock_retval)
void spi_get_freq_limit_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, bool gpio_is_used, int input_delay_ns, int cmock_to_return);
typedef int (* CMOCK_spi_get_freq_limit_CALLBACK)(bool gpio_is_used, int input_delay_ns, int cmock_num_calls);
void spi_get_freq_limit_AddCallback(CMOCK_spi_get_freq_limit_CALLBACK Callback);
void spi_get_freq_limit_Stub(CMOCK_spi_get_freq_limit_CALLBACK Callback);
#define spi_get_freq_limit_StubWithCallback spi_get_freq_limit_Stub
#define spi_get_freq_limit_ExpectAndThrow(gpio_is_used, input_delay_ns, cmock_to_throw) spi_get_freq_limit_CMockExpectAndThrow(__LINE__, gpio_is_used, input_delay_ns, cmock_to_throw)
void spi_get_freq_limit_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, bool gpio_is_used, int input_delay_ns, CEXCEPTION_T cmock_to_throw);
#define spi_get_freq_limit_IgnoreArg_gpio_is_used() spi_get_freq_limit_CMockIgnoreArg_gpio_is_used(__LINE__)
void spi_get_freq_limit_CMockIgnoreArg_gpio_is_used(UNITY_LINE_TYPE cmock_line);
#define spi_get_freq_limit_IgnoreArg_input_delay_ns() spi_get_freq_limit_CMockIgnoreArg_input_delay_ns(__LINE__)
void spi_get_freq_limit_CMockIgnoreArg_input_delay_ns(UNITY_LINE_TYPE cmock_line);

#ifdef __cplusplus
}
#endif

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
