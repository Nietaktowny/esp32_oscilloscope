/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_SPI_DRIVER_MOCKS_H
#define _MOCK_SPI_DRIVER_MOCKS_H

#include "unity.h"
#include "stdio.h"
#include "spi_driver_mocks.h"
#include "CException.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

#ifdef __cplusplus
extern "C" {
#endif

void mock_spi_driver_mocks_Init(void);
void mock_spi_driver_mocks_Destroy(void);
void mock_spi_driver_mocks_Verify(void);




#define spi_bus_add_device_IgnoreAndReturn(cmock_retval) spi_bus_add_device_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void spi_bus_add_device_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define spi_bus_add_device_StopIgnore() spi_bus_add_device_CMockStopIgnore()
void spi_bus_add_device_CMockStopIgnore(void);
#define spi_bus_add_device_ExpectAnyArgsAndReturn(cmock_retval) spi_bus_add_device_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void spi_bus_add_device_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define spi_bus_add_device_ExpectAndReturn(host_id, dev_config, handle, cmock_retval) spi_bus_add_device_CMockExpectAndReturn(__LINE__, host_id, dev_config, handle, cmock_retval)
void spi_bus_add_device_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, spi_host_device_t host_id, const spi_device_interface_config_t* dev_config, spi_device_handle_t* handle, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_spi_bus_add_device_CALLBACK)(spi_host_device_t host_id, const spi_device_interface_config_t* dev_config, spi_device_handle_t* handle, int cmock_num_calls);
void spi_bus_add_device_AddCallback(CMOCK_spi_bus_add_device_CALLBACK Callback);
void spi_bus_add_device_Stub(CMOCK_spi_bus_add_device_CALLBACK Callback);
#define spi_bus_add_device_StubWithCallback spi_bus_add_device_Stub
#define spi_bus_add_device_ExpectAndThrow(host_id, dev_config, handle, cmock_to_throw) spi_bus_add_device_CMockExpectAndThrow(__LINE__, host_id, dev_config, handle, cmock_to_throw)
void spi_bus_add_device_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, spi_host_device_t host_id, const spi_device_interface_config_t* dev_config, spi_device_handle_t* handle, CEXCEPTION_T cmock_to_throw);
#define spi_bus_add_device_ReturnThruPtr_handle(handle) spi_bus_add_device_CMockReturnMemThruPtr_handle(__LINE__, handle, sizeof(spi_device_handle_t))
#define spi_bus_add_device_ReturnArrayThruPtr_handle(handle, cmock_len) spi_bus_add_device_CMockReturnMemThruPtr_handle(__LINE__, handle, cmock_len * sizeof(*handle))
#define spi_bus_add_device_ReturnMemThruPtr_handle(handle, cmock_size) spi_bus_add_device_CMockReturnMemThruPtr_handle(__LINE__, handle, cmock_size)
void spi_bus_add_device_CMockReturnMemThruPtr_handle(UNITY_LINE_TYPE cmock_line, spi_device_handle_t* handle, size_t cmock_size);
#define spi_bus_add_device_IgnoreArg_host_id() spi_bus_add_device_CMockIgnoreArg_host_id(__LINE__)
void spi_bus_add_device_CMockIgnoreArg_host_id(UNITY_LINE_TYPE cmock_line);
#define spi_bus_add_device_IgnoreArg_dev_config() spi_bus_add_device_CMockIgnoreArg_dev_config(__LINE__)
void spi_bus_add_device_CMockIgnoreArg_dev_config(UNITY_LINE_TYPE cmock_line);
#define spi_bus_add_device_IgnoreArg_handle() spi_bus_add_device_CMockIgnoreArg_handle(__LINE__)
void spi_bus_add_device_CMockIgnoreArg_handle(UNITY_LINE_TYPE cmock_line);
#define spi_bus_initialize_IgnoreAndReturn(cmock_retval) spi_bus_initialize_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void spi_bus_initialize_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define spi_bus_initialize_StopIgnore() spi_bus_initialize_CMockStopIgnore()
void spi_bus_initialize_CMockStopIgnore(void);
#define spi_bus_initialize_ExpectAnyArgsAndReturn(cmock_retval) spi_bus_initialize_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void spi_bus_initialize_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define spi_bus_initialize_ExpectAndReturn(host_id, bus_config, dma_chan, cmock_retval) spi_bus_initialize_CMockExpectAndReturn(__LINE__, host_id, bus_config, dma_chan, cmock_retval)
void spi_bus_initialize_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, spi_host_device_t host_id, const spi_bus_config_t* bus_config, spi_dma_chan_t dma_chan, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_spi_bus_initialize_CALLBACK)(spi_host_device_t host_id, const spi_bus_config_t* bus_config, spi_dma_chan_t dma_chan, int cmock_num_calls);
void spi_bus_initialize_AddCallback(CMOCK_spi_bus_initialize_CALLBACK Callback);
void spi_bus_initialize_Stub(CMOCK_spi_bus_initialize_CALLBACK Callback);
#define spi_bus_initialize_StubWithCallback spi_bus_initialize_Stub
#define spi_bus_initialize_ExpectAndThrow(host_id, bus_config, dma_chan, cmock_to_throw) spi_bus_initialize_CMockExpectAndThrow(__LINE__, host_id, bus_config, dma_chan, cmock_to_throw)
void spi_bus_initialize_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, spi_host_device_t host_id, const spi_bus_config_t* bus_config, spi_dma_chan_t dma_chan, CEXCEPTION_T cmock_to_throw);
#define spi_bus_initialize_IgnoreArg_host_id() spi_bus_initialize_CMockIgnoreArg_host_id(__LINE__)
void spi_bus_initialize_CMockIgnoreArg_host_id(UNITY_LINE_TYPE cmock_line);
#define spi_bus_initialize_IgnoreArg_bus_config() spi_bus_initialize_CMockIgnoreArg_bus_config(__LINE__)
void spi_bus_initialize_CMockIgnoreArg_bus_config(UNITY_LINE_TYPE cmock_line);
#define spi_bus_initialize_IgnoreArg_dma_chan() spi_bus_initialize_CMockIgnoreArg_dma_chan(__LINE__)
void spi_bus_initialize_CMockIgnoreArg_dma_chan(UNITY_LINE_TYPE cmock_line);
#define esp_err_to_name_IgnoreAndReturn(cmock_retval) esp_err_to_name_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_err_to_name_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, char* cmock_to_return);
#define esp_err_to_name_StopIgnore() esp_err_to_name_CMockStopIgnore()
void esp_err_to_name_CMockStopIgnore(void);
#define esp_err_to_name_ExpectAnyArgsAndReturn(cmock_retval) esp_err_to_name_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void esp_err_to_name_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, char* cmock_to_return);
#define esp_err_to_name_ExpectAndReturn(code, cmock_retval) esp_err_to_name_CMockExpectAndReturn(__LINE__, code, cmock_retval)
void esp_err_to_name_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t code, char* cmock_to_return);
typedef char* (* CMOCK_esp_err_to_name_CALLBACK)(esp_err_t code, int cmock_num_calls);
void esp_err_to_name_AddCallback(CMOCK_esp_err_to_name_CALLBACK Callback);
void esp_err_to_name_Stub(CMOCK_esp_err_to_name_CALLBACK Callback);
#define esp_err_to_name_StubWithCallback esp_err_to_name_Stub
#define esp_err_to_name_ExpectAndThrow(code, cmock_to_throw) esp_err_to_name_CMockExpectAndThrow(__LINE__, code, cmock_to_throw)
void esp_err_to_name_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, esp_err_t code, CEXCEPTION_T cmock_to_throw);
#define esp_err_to_name_IgnoreArg_code() esp_err_to_name_CMockIgnoreArg_code(__LINE__)
void esp_err_to_name_CMockIgnoreArg_code(UNITY_LINE_TYPE cmock_line);

#ifdef __cplusplus
}
#endif

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
